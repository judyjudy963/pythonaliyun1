1、
简单数据类型
整型<class 'int'>
浮点型<class 'float'>
布尔型<class 'bool'>
容器数据类型
列表<class 'list'>
元组<class 'tuple'>
字典<class 'dict'>
集合<class 'set'>
字符串<class 'str'>

2、x = [i for i in range(1, 10, 2)]
print(x, type(x))
# [1, 3, 5, 7, 9] <class 'list'>

x = [i for i in range(10, 1, -2)]
print(x, type(x))
# [10, 8, 6, 4, 2] <class 'list'>

3、append和extend的区别：
list.extend(seq) 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）
append 会把多个值作为一个值添加；

4、list.remove(obj)移除列表中某个值obj，给定的是元素值
list.pop([index=-1]) 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值，给定的是索引值；
del var1[, var2 ……] 删除单个或多个对象

5、list.reverse() 反向列表中元素
list.sort(key=None, reverse=False) 对原列表进行排序，true为降序，false升序

6、元组：（元素1， 元素2，...,元素n)Python 的元组与列表类似，不同之处在于tuple被创建后就不能对其进行修改，类似字符串。
元组使用小括号，列表使用方括号。
print(8 * (8))  # 64
print(8 * (8,))  # (8, 8, 8, 8, 8, 8, 8, 8)；
元组有不可更改 (immutable) 的性质，因此不能直接给元组的元素赋值，但是只要元组中的元素可更改 (mutable)，那么我们可以直接更改其元素
元组相关的操作符
等号操作符：==
连接操作符 +
重复操作符 *
成员关系操作符in、not in

7、字符串：
capitalize() 将字符串的第一个字符转换为大写
lower() 转换字符串中所有大写字符为小写。
upper() 转换字符串中的小写字母为大写。
swapcase() 将字符串中大写转换为小写，小写转换为大写。
endswith(suffix, beg=0, end=len(string)) 检查字符串是否以指定子字符串 suffix 结束，如果是，返回 True，否则返回 False。如果 beg 和 end 指定值，则在指定范围内检查。
startswith(substr, beg=0,end=len(string)) 检查字符串是否以指定子字符串 substr 开头，如果是，返回 True，否则返回 False。如果 beg 和 end 指定值，则在指定范围内检查。
isnumeric() 如果字符串中只包含数字字符，则返回 True，否则返回 False。
ljust(width[, fillchar])返回一个原字符串左对齐，并使用fillchar（默认空格）填充至长度width的新字符串。
rjust(width[, fillchar])返回一个原字符串右对齐，并使用fillchar（默认空格）填充至长度width的新字符串。
lstrip([chars]) 截掉字符串左边的空格或指定字符。
rstrip([chars]) 删除字符串末尾的空格或指定字符。
strip([chars]) 在字符串上执行lstrip()和rstrip()。
partition(sub) 找到子字符串sub，把字符串分为一个三元组(pre_sub,sub,fol_sub)，如果字符串中不包含sub则返回('原字符串','','')。
rpartition(sub)类似于partition()方法，不过是从右边开始查找。
replace(old, new [, max]) 把 将字符串中的old替换成new，如果max指定，则替换不超过max次。
split(str="", num) 不带参数默认是以空格为分隔符切片字符串，如果num参数有设置，则仅分隔num个子字符串，返回切片后的子字符串拼接的列表。
